layout custom_lines
    code metapost

    ### redefinitions of existing points

         # initialise the symbols here

         # redefine the symbols here

               # Modifier la ligne wall_pit par la ligne pit mais avec le trait ext épais comme celui des walls
               def l_wall_pit (expr P) =
               T:=identity;
               cas := 0;
               dlzka := arclength P;
               mojkrok:=adjust_step(dlzka, 0.25u);
               pickup PenD;
               forever:
                    t := arctime cas of P;
                    mark_ (P,t,0.2u);
                    cas := cas + mojkrok;
                    exitif cas > dlzka + (mojkrok / 3); % for rounding errors
               endfor;
               pickup PenA; % C'est ça qui a été modifié ; origin = "pickup PenC;"
               thdraw P;
               enddef;

               # Changer la ligne pointillée du symbole line wall:presumed
               def l_wall_presumed (expr P) = 
                    T:=identity;
                    pickup PenA;
                    # Old definition
                    #thdraw P dashed evenly scaled (2*optical_zoom);
                    # New definition
                    thdraw P dashed evenly scaled (.1u);
               enddef;
               
               # Changer la ligne pointillée du symbole line chemney
               def l_chimney (expr P) = 
                    T:=identity;
                    pickup PenC;
                    %thdraw P dashed evenly scaled optical_zoom;
                    thdraw P dashed evenly scaled (.05u);
               enddef;

               # To change slopes 
               def l_slope (expr P,S)(text Q) = 
                    %show Q;
                    T:=identity;
                    numeric dirs[];
                    numeric lengths[];
                    for i=Q:
                    dirs[redpart i]:=greenpart i;
                    lengths[redpart i]:=bluepart i;
                    endfor;  
                    li:=length(P); % last
                    alw_perpendicular:=true;
                    for i=0 upto li:
                    if unknown dirs[i]: dirs[i]:=-1; 
                    else: 
                         if dirs[i]>-1:
                         dirs[i]:=((90-dirs[i]) - angle(thdir(P,i))) mod 360;
                         alw_perpendicular:=false;
                         fi;
                    fi;
                    if unknown lengths[i]: lengths[i]:=-1; fi;
                    endfor;
                    %for i=0 upto li: show dirs[i]; endfor;
                    ni:=0; % next
                    pi:=0; % previous
                    for i=0 upto li:
                    d:=dirs[i];
                    if d=-1:
                         if (i=0) or (i=li):
                         dirs[i] := angle(thdir(P,i) rotated 90) mod 360;
                         pi:=i;
                         else:
                         if ni<=i:
                         for j=i upto li:
                              ni:=j;
                              exitif dirs[j]>-1;
                         endfor;
                         fi;
                         w:=arclength(subpath(pi,i) of P) / 
                         arclength(subpath(pi,ni) of P);
                         dirs[i]:=w[dirs[pi],dirs[ni]];
                         %if (dirs[i]-angle(thdir(P,i))) mod 360>180:
                         %dirs[i]:=w[dirs[ni],dirs[pi]];
                         %message("*******");
                         %fi;
                         fi;
                    else:
                         pi:=i;
                    fi;
                    endfor;
                    %for i=0 upto li: show dirs[i]; endfor;
                    ni:=0; % next
                    pi:=0; % previous
                    for i=0 upto li:
                    l:=lengths[i];
                    if l=-1:
                         if (i=0) or (i=li):
                         lengths[i] := 1cm; % should never happen!
                         thwarning("slope width at the end point not specified");
                         pi:=i;
                         else:
                         if ni<=i:
                         for j=i+1 upto li:
                              ni:=j;
                              exitif lengths[j]>-1;
                         endfor;  
                         fi;
                         w:=arclength(subpath(pi,i) of P) /   
                         arclength(subpath(pi,ni) of P);
                         lengths[i]:=w[lengths[pi],lengths[ni]];
                         pi:=i;
                         fi;
                    else:
                         pi:=i;
                    fi;
                    endfor;
                    %for i=0 upto li: show lengths[i]; endfor;
                    T:=identity;
                    boolean par;
                    cas := 0.3u;
                    krok := 0.7u;
                    dlzka := (arclength P);
                    if dlzka>3u: dlzka:=dlzka-0.6u fi;
                    mojkrok:=adjust_step(dlzka,1.4u) / 5;
                    pickup PenD;
                    par := false;
                    forever:
                    t := arctime cas of P;
                    if t mod 1>0:  % not a key point
                         w := (arclength(subpath(floor t,t) of P) / 
                         arclength(subpath(floor t,ceiling t) of P));
                         if alw_perpendicular:
                         a := 90;
                         else:
                         a := w[dirs[floor t],dirs[ceiling t]];
                         fi;
                         l := w[lengths[floor t],lengths[ceiling t]];
                    else:
                         if alw_perpendicular:
                         a := 90;
                         else:
                         a:= dirs[t];
                         fi; 
                         l:=lengths[t];
                    fi;    
                    a := a + angle(thdir(P,t));    
                    thdraw (point t of P) -- 
                    ((point t of P) + if par: 0.333 * fi l * unitvector(dir(a)));
                    cas := cas + mojkrok;
                    par := not par;
                    exitif cas > dlzka + .3u + (krok / 3);  % for rounding errors
                    endfor;
                    if S = 1: pickup PenC; draw P fi;
                    %pickup pencircle scaled 3pt;
                    %for i=0 upto li: draw point i of P; endfor;
               enddef; 

    ### new definitions

         ## add legend names for each new symbol definition

         ## initialise the symbols here

         ## define the symbols here

               # Deviation line (by Tarquin 2019)
                    def l_u_deviation (expr P) =
                         begingroup;
                         save ellipse;
                         T:=identity;
                         pickup PenC;
                         path ellipse;
                         ellipse:=fullcircle xscaled (.5u) yscaled (.25u) shifted (point (length P) of P);
                         thdraw P cutafter ellipse;
                         draw ellipse;
                         endgroup;
                    enddef;
                    initsymbol("l_u_deviation");
                    def l_u_deviation_legend =
                    l_u_deviation(((.1,.5)--(.8,.5)) inscale);
                    enddef;


    # Line symbol for strata for cross sections (u:strata). It works exactly as line section
    #     symbol but you should use -clip off option:
    # Symbole de ligne pour dessiner des strates (u:strata). 
    #     Cela fonctionne exactement comme les autres sections de ligne
    #     mais vous devrez rajouter l'option -clip off:
    def l_u_strata (expr P) =
      T:=identity;
      path Q; Q = punked P;
      for t = 0 upto length P - 1:
        pair zz[];
        zz1 := point t of P;
        zz2 := point t+1 of P;
        zz3 := postcontrol t of P;
        zz4 := precontrol t+1 of P;
        linecap:=0;
        if (length(zz3-1/3[zz1,zz2]) > 0.1pt) or (length(zz4-2/3[zz1,zz2]) > 0.1pt):
          zz5 = whatever[zz1,zz2];
          (zz3-zz5) = whatever * (zz1-zz2) rotated 90;
          pickup pencircle scaled 1 mm;
          draw zz1--zz5 dashed evenly;
          pickup PenA;
          draw zz1--zz5 withcolor background;
          zz6 = whatever[zz1,zz2];
          (zz4-zz6) = whatever * (zz1-zz2) rotated 90;
          pickup pencircle scaled 1 mm;
          draw zz2--zz6 dashed evenly;
          pickup PenA;
          draw zz2--zz6 withcolor background;
        else:
          pickup pencircle scaled 1 mm;
          draw zz1--zz2 dashed evenly;
          pickup PenA;
          draw zz1--zz2 withcolor background;
        fi;
      endfor;
    enddef;


    # Line symbol for fault. 
    #     It works exactly as line section symbol but you should use -clip off option:
    # Symbole de ligne pour dessiner des failles (u:fault). 
    #     Cela fonctionne exactement comme les autres sections de ligne
    #     mais vous devrez rajouter l'option -clip off:
    def l_u_fault (expr P) =
      T:=identity;
      path Q; Q = punked P;
      pickup PenA;
      for t = 0 upto length P - 1:
        pair zz[];
        zz1 := point t of P;
        zz2 := point t+1 of P;
        zz3 := postcontrol t of P;
        zz4 := precontrol t+1 of P;
        if (length(zz3-1/3[zz1,zz2]) > 0.1pt) or (length(zz4-2/3[zz1,zz2]) > 0.1pt):
          zz5 = whatever[zz1,zz2];
          (zz3-zz5) = whatever * (zz1-zz2) rotated 90;
          draw zz1--zz5 dashed evenly;
          zz6 = whatever[zz1,zz2];
          (zz4-zz6) = whatever * (zz1-zz2) rotated 90;
          draw zz2--zz6 dashed evenly;
        else:
          draw zz1--zz2 dashed evenly;
        fi;
      endfor;
    enddef;


    # Line symbol for the surface. 
    #     It works exactly as line section symbol but you should use -clip off option:
    # Symbole de ligne pour dessiner la surface (u:surf). 
    #     Cela fonctionne exactement comme les autres sections de ligne
    #     mais vous devrez rajouter l'option -clip off:
    def l_u_surf (expr P) =
      T:=identity;
      path Q; Q = punked P;
      pickup PenC;
      draw Q dashed evenly withcolor (0.5, 0, 0);  
    enddef;


    # To add a doline line (u:doline); Do not forget the option -clip off !
    # Symbole de ligne pour dessiner une ligne doline (u:doline). 
    #     Cela fonctionne exactement comme les autres sections de ligne
    #     mais vous devrez rajouter l'option -clip off:
    def l_u_doline (expr P) =
      T:=identity;
      laenge:= arclength P;
      symsize:=adjust_step(laenge,2u);
      triangle_width:=symsize/10;
      cur:=(symsize-triangle_width)/2;
      pickup PenC;
      forever:
        t1 := arctime (cur) of P;
         t  := arctime (cur + triangle_width/2) of P;
        t2 := arctime (cur + triangle_width) of P;
        thfill (subpath (t1,t2) of P) --
          ((point t of P) + symsize/2 * unitvector(thdir(P,t) rotated 90)) --
          cycle;
        thdraw (point t2 of P) --((point t of P) + symsize/2 * unitvector(thdir(P,t) rotated 90)) --
          (point t1 of P) withcolor (0.5, 0, 0);
        cur := cur + symsize;
        exitif cur > laenge - (1*symsize/3); % for rounding errors
        t1:=arctime (cur) of P;
      endfor;
    enddef;

    endcode
endlayout